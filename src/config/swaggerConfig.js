const swaggerJsdoc = require("swagger-jsdoc");
const swaggerUi = require("swagger-ui-express");

const options = {
    definition: {
        openapi: "3.0.0",
        info: {
            title: "Netflix Clone API",
            version: "1.0.0",
            description: "API cho h·ªá th·ªëng Netflix Clone - Ph√°t video tr·ª±c tuy·∫øn",
        },
        servers: [
            {
                url: "http://localhost:5000",
                description: "Local server"
            }
        ],
        components: {
            securitySchemes: {
                BearerAuth: {
                    type: "http",
                    scheme: "bearer",
                    bearerFormat: "JWT"
                }
            }
        },
        security: [{ BearerAuth: [] }], // üõë Th√™m BearerAuth cho t·∫•t c·∫£ API
        tags: [ // ƒê·ªãnh nghƒ©a tag ·ªü ƒë√¢y lu√¥n cho ch·∫Øc
            {
                name: "Search",
                description: "API t√¨m ki·∫øm phim b·∫±ng Elasticsearch"
            },
            {
                name: "Favorites",
                description: "API qu·∫£n l√Ω phim y√™u th√≠ch"
            },
            {
                name: "Email Notifications",
                description: "API qu·∫£n l√Ω v√† g·ª≠i th√¥ng b√°o email ƒë·∫øn ng∆∞·ªùi d√πng"
            },
            {
                name: "Bulk Email",
                description: "API g·ª≠i email h√†ng lo·∫°t ƒë·∫øn ng∆∞·ªùi d√πng"
            }
            // Th√™m c√°c tag kh√°c n·∫øu c·∫ßn
        ],
        paths: { // ƒê·ªãnh nghƒ©a c√°c ƒë∆∞·ªùng d·∫´n API
            "/api/search": { // ƒê∆∞·ªùng d·∫´n API
                get: { // Ph∆∞∆°ng th·ª©c GET
                    tags: ["Search"], // G√°n tag
                    summary: "T√¨m ki·∫øm phim",
                    description: "T√¨m ki·∫øm phim theo t·ª´ kh√≥a v√† c√≥ h·ªó tr·ª£ l·ªçc theo tr∆∞·ªùng c·ª• th·ªÉ v·ªõi c√∫ ph√°p 'field:value'",
                    parameters: [
                        {
                            name: "q",
                            in: "query",
                            description: "T·ª´ kh√≥a t√¨m ki·∫øm phim ho·∫∑c c√∫ ph√°p 'field:value' ƒë·ªÉ t√¨m theo tr∆∞·ªùng c·ª• th·ªÉ",
                            required: true,
                            schema: { type: "string" }
                        },
                        {
                            name: "size",
                            in: "query",
                            description: "S·ªë l∆∞·ª£ng k·∫øt qu·∫£ tr√™n m·ªôt trang",
                            required: false,
                            schema: { type: "integer", default: 20 }
                        },
                        {
                            name: "from",
                            in: "query",
                            description: "V·ªã tr√≠ b·∫Øt ƒë·∫ßu l·∫•y k·∫øt qu·∫£ (d√πng cho ph√¢n trang)",
                            required: false,
                            schema: { type: "integer", default: 0 }
                        }
                    ],
                    responses: {
                        '200': {
                            description: "Th√†nh c√¥ng. Tr·∫£ v·ªÅ m·∫£ng k·∫øt qu·∫£ phim v√† th√¥ng tin meta.",
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object",
                                        properties: {
                                            success: {
                                                type: "boolean",
                                                example: true
                                            },
                                            data: {
                                                type: "array",
                                                items: {
                                                    type: "object"
                                                }
                                            },
                                            meta: {
                                                type: "object",
                                                properties: {
                                                    query: { type: "string" },
                                                    field: { type: "string", nullable: true },
                                                    from: { type: "integer" },
                                                    size: { type: "integer" },
                                                    total: { type: "integer" }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        '400': {
                            description: "L·ªói client - Thi·∫øu tham s·ªë ho·∫∑c ƒë·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá",
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object",
                                        properties: {
                                            success: {
                                                type: "boolean",
                                                example: false
                                            },
                                            message: {
                                                type: "string"
                                            }
                                        }
                                    }
                                }
                            }
                        },
                        '500': {
                            description: "L·ªói server",
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object",
                                        properties: {
                                            success: {
                                                type: "boolean",
                                                example: false
                                            },
                                            message: {
                                                type: "string"
                                            },
                                            error: {
                                                type: "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                // Th√™m c√°c ph∆∞∆°ng th·ª©c kh√°c (post, put, delete) n·∫øu c√≥ cho path n√†y
            },
            "/api/favorites": {
                get: {
                    tags: ["Favorites"],
                    summary: "L·∫•y danh s√°ch phim y√™u th√≠ch",
                    description: "L·∫•y danh s√°ch phim y√™u th√≠ch c·ªßa ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p",
                    security: [{ BearerAuth: [] }],
                    responses: {
                        '200': {
                            description: "Th√†nh c√¥ng. Tr·∫£ v·ªÅ m·∫£ng phim y√™u th√≠ch.",
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object",
                                        properties: {
                                            success: {
                                                type: "boolean",
                                                example: true
                                            },
                                            data: {
                                                type: "array",
                                                items: {
                                                    type: "object",
                                                    properties: {
                                                        id: { type: "string" },
                                                        title: { type: "string" },
                                                        slug: { type: "string" },
                                                        thumbnail: { type: "string" },
                                                        year: { type: "string" },
                                                        rating: { type: "number" }
                                                    }
                                                }
                                            },
                                            message: { type: "string" }
                                        }
                                    }
                                }
                            }
                        },
                        '401': {
                            description: "Unauthorized - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"
                        },
                        '500': {
                            description: "L·ªói server"
                        }
                    }
                },
                post: {
                    tags: ["Favorites"],
                    summary: "Th√™m phim v√†o danh s√°ch y√™u th√≠ch",
                    description: "Th√™m m·ªôt b·ªô phim v√†o danh s√°ch y√™u th√≠ch c·ªßa ng∆∞·ªùi d√πng",
                    security: [{ BearerAuth: [] }],
                    requestBody: {
                        content: {
                            "application/json": {
                                schema: {
                                    type: "object",
                                    properties: {
                                        movieId: { type: "string", description: "ID c·ªßa phim" },
                                        movieSlug: { type: "string", description: "Slug c·ªßa phim" }
                                    },
                                    example: {
                                        movieSlug: "avengers-endgame"
                                    }
                                }
                            }
                        }
                    },
                    responses: {
                        '200': {
                            description: "Th√†nh c√¥ng. Phim ƒë√£ ƒë∆∞·ª£c th√™m v√†o y√™u th√≠ch."
                        },
                        '400': {
                            description: "L·ªói d·ªØ li·ªáu ƒë·∫ßu v√†o"
                        },
                        '401': {
                            description: "Unauthorized - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"
                        },
                        '404': {
                            description: "Kh√¥ng t√¨m th·∫•y phim"
                        },
                        '500': {
                            description: "L·ªói server"
                        }
                    }
                }
            },
            "/api/favorites/{movieId}": {
                delete: {
                    tags: ["Favorites"],
                    summary: "X√≥a phim kh·ªèi danh s√°ch y√™u th√≠ch",
                    description: "X√≥a m·ªôt b·ªô phim kh·ªèi danh s√°ch y√™u th√≠ch c·ªßa ng∆∞·ªùi d√πng",
                    security: [{ BearerAuth: [] }],
                    parameters: [
                        {
                            name: "movieId",
                            in: "path",
                            description: "ID c·ªßa phim c·∫ßn x√≥a",
                            required: true,
                            schema: { type: "string" }
                        }
                    ],
                    responses: {
                        '200': {
                            description: "Th√†nh c√¥ng. Phim ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi y√™u th√≠ch."
                        },
                        '401': {
                            description: "Unauthorized - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"
                        },
                        '404': {
                            description: "Kh√¥ng t√¨m th·∫•y phim trong danh s√°ch y√™u th√≠ch"
                        },
                        '500': {
                            description: "L·ªói server"
                        }
                    }
                }
            },
            "/api/favorites/check": {
                get: {
                    tags: ["Favorites"],
                    summary: "Ki·ªÉm tra tr·∫°ng th√°i y√™u th√≠ch c·ªßa phim",
                    description: "Ki·ªÉm tra xem m·ªôt phim c√≥ trong danh s√°ch y√™u th√≠ch c·ªßa ng∆∞·ªùi d√πng hay kh√¥ng",
                    security: [{ BearerAuth: [] }],
                    parameters: [
                        {
                            name: "movieId",
                            in: "query",
                            description: "ID c·ªßa phim c·∫ßn ki·ªÉm tra",
                            schema: { type: "string" }
                        },
                        {
                            name: "movieSlug",
                            in: "query",
                            description: "Slug c·ªßa phim c·∫ßn ki·ªÉm tra",
                            schema: { type: "string" }
                        }
                    ],
                    responses: {
                        '200': {
                            description: "Th√†nh c√¥ng. Tr·∫£ v·ªÅ tr·∫°ng th√°i y√™u th√≠ch c·ªßa phim.",
                            content: {
                                "application/json": {
                                    schema: {
                                        type: "object",
                                        properties: {
                                            success: {
                                                type: "boolean",
                                                example: true
                                            },
                                            data: {
                                                type: "object",
                                                properties: {
                                                    isFavorite: { 
                                                        type: "boolean",
                                                        description: "True n·∫øu phim n·∫±m trong danh s√°ch y√™u th√≠ch, ng∆∞·ª£c l·∫°i l√† false" 
                                                    }
                                                }
                                            },
                                            message: { type: "string" }
                                        }
                                    }
                                }
                            }
                        },
                        '400': {
                            description: "Thi·∫øu th√¥ng tin phim ƒë·ªÉ ki·ªÉm tra"
                        },
                        '401': {
                            description: "Unauthorized - Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p"
                        },
                        '404': {
                            description: "Kh√¥ng t√¨m th·∫•y phim"
                        },
                        '500': {
                            description: "L·ªói server"
                        }
                    }
                }
            }
            // Th√™m c√°c ƒë∆∞·ªùng d·∫´n API kh√°c n·∫øu mu·ªën ƒë·ªãnh nghƒ©a ·ªü ƒë√¢y
        }
        // --- H·∫æT PH·∫¶N TH√äM ---
    },
    apis: [
        "./src/routes/*.js", // Qu√©t t·∫•t c·∫£ c√°c file trong routes ƒë·ªÉ l·∫•y API Docs
        "./src/docs/*.js"    // Qu√©t t·∫•t c·∫£ c√°c file trong docs ƒë·ªÉ l·∫•y API Docs
    ],
};

const swaggerSpec = swaggerJsdoc(options);

const swaggerDocs = (app) => {
    app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));
    console.log("üìÑ Swagger Docs: http://localhost:5000/api-docs");
};

module.exports = swaggerDocs;