// services/movieCrawlService.js
require('dotenv').config();
const axios = require('axios');
const Movie = require('../models/movie');
const Category = require('../models/category');

// C·∫•u h√¨nh URL c∆° b·∫£n t·ª´ bi·∫øn m√¥i tr∆∞·ªùng ho·∫∑c gi√° tr·ªã m·∫∑c ƒë·ªãnh
const BASE_URL = process.env.API_BASE_URL || 'http://localhost:5000/api/ophim/';

class MovieCrawlService {
    async crawlMovies(page = 1) { // Accept page as a parameter, default is 1
        try {
            // L·∫•y danh s√°ch phim t·ª´ API, v·ªõi page truy·ªÅn v√†o
            const response = await axios.get(`${BASE_URL}movies`, {
                params: { page }  // Include the page parameter
            });
            const data = response.data;

            console.log("D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ API:", JSON.stringify(data, null, 2)); // Log the entire response

            // Ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ c√≥ h·ª£p l·ªá kh√¥ng
            if (data.data && data.data.status && Array.isArray(data.data.items) && data.data.items.length > 0) {
                const moviesList = data.data.items;
                
                const savedMovies = [];
                const updatedMovies = [];
                const existingSlugs = new Set();
                const existingMoviesMap = new Map(); // Map ƒë·ªÉ l∆∞u phim ƒë√£ t·ªìn t·∫°i theo slug

                // Ki·ªÉm tra phim n√†o ƒë√£ t·ªìn t·∫°i trong DB tr∆∞·ªõc khi l·∫•y chi ti·∫øt t·ª´ API
                for (const movie of moviesList) {
                    if (movie.slug) {
                        const existingMovie = await Movie.findOne({ slug: movie.slug });
                        if (existingMovie) {
                            existingSlugs.add(movie.slug);
                            existingMoviesMap.set(movie.slug, existingMovie);
                            console.log(`üîç Phim '${movie.name}' (${movie.slug}) ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra c·∫≠p nh·∫≠t t·∫≠p m·ªõi...`);
                        }
                    }
                }

                // L·∫•y th√¥ng tin t·∫•t c·∫£ c√°c phim (c·∫£ m·ªõi v√† c≈©) ƒë·ªÉ ki·ªÉm tra
                const allMoviesDetailsPromises = moviesList.map(movie => {
                    if (!movie.slug) {
                        console.error(`‚ùå Phim '${movie.name}' thi·∫øu slug, kh√¥ng th·ªÉ l·∫•y chi ti·∫øt.`);
                        return null;
                    }

                    return axios.get(`${BASE_URL}movies/${movie.slug}`)
                        .then(res => {
                            // L·∫•y c·∫£ movie v√† episodes t·ª´ response
                            const { movie: movieInfo, episodes } = res.data.data;
                            return { 
                                movieInfo, 
                                episodes,
                                isExisting: existingSlugs.has(movie.slug)
                            };
                        })
                        .catch(err => {
                            console.error(`L·ªói khi l·∫•y chi ti·∫øt phim ${movie.slug}:`, err.message);
                            return null;
                        });
                });

                // Wait for all movie details to be fetched
                const allMoviesDetails = await Promise.all(allMoviesDetailsPromises);
                const validMoviesDetails = allMoviesDetails.filter(detail => detail !== null);

                if (validMoviesDetails.length === 0) {
                    console.log("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu phim chi ti·∫øt n√†o ƒë∆∞·ª£c l·∫•y v·ªÅ.");
                    return { savedMovies: [], updatedMovies: [] };
                }

                // Chia th√†nh hai danh s√°ch: phim m·ªõi v√† phim c·∫ßn c·∫≠p nh·∫≠t
                const newMoviesDetails = validMoviesDetails.filter(detail => !detail.isExisting);
                const existingMoviesDetails = validMoviesDetails.filter(detail => detail.isExisting);

                // X·ª≠ l√Ω phim m·ªõi - t·∫°o m·ªõi ho√†n to√†n
                for (const detail of newMoviesDetails) {
                    if (!detail || !detail.movieInfo) {
                        console.log("‚ùå Phim kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt.");
                        continue;
                    }

                    const { movieInfo, episodes } = detail;

                    const genre = movieInfo.genre || 'Unknown';

                    let category = await Category.findOne({ name: genre });
                    if (!category) {
                        category = new Category({ name: genre });
                        await category.save();
                        console.log(`‚úÖ Th·ªÉ lo·∫°i '${genre}' ƒë√£ ƒë∆∞·ª£c t·∫°o!`);
                    }

                    // Chu·∫©n b·ªã d·ªØ li·ªáu phim v·ªõi c·∫•u tr√∫c m·ªõi
                    const movieData = {
                        tmdb: {
                            type: movieInfo.tmdb?.type || null,
                            id: movieInfo.tmdb?.id || '',
                            season: movieInfo.tmdb?.season || null,
                            vote_average: movieInfo.tmdb?.vote_average || 0,
                            vote_count: movieInfo.tmdb?.vote_count || 0
                        },
                        imdb: {
                            id: movieInfo.imdb?.id || ''
                        },
                        created: {
                            time: movieInfo.created?.time || new Date()
                        },
                        modified: {
                            time: movieInfo.modified?.time || new Date()
                        },
                        name: movieInfo.name,
                        origin_name: movieInfo.origin_name,
                        content: movieInfo.content,
                        type: movieInfo.type || 'series',
                        status: movieInfo.status || 'completed',
                        thumb_url: movieInfo.thumb_url || '',
                        trailer_url: movieInfo.trailer_url || '',
                        time: movieInfo.time || '60 ph√∫t/t·∫≠p',
                        episode_current: movieInfo.episode_current || '',
                        episode_total: movieInfo.episode_total || '',
                        quality: movieInfo.quality || 'HD',
                        lang: movieInfo.lang || 'Vietsub',
                        notify: movieInfo.notify || '',
                        showtimes: movieInfo.showtimes || '',
                        slug: movieInfo.slug,
                        year: movieInfo.year || new Date().getFullYear(),
                        view: movieInfo.view || 0,
                        actor: Array.isArray(movieInfo.actor) ? movieInfo.actor : [],
                        director: Array.isArray(movieInfo.director) ? movieInfo.director : [''],
                        category: (movieInfo.category || []).map(cat => ({
                            id: cat.id || '',
                            name: cat.name || '',
                            slug: cat.slug || ''
                        })),
                        country: (movieInfo.country || []).map(cou => ({
                            id: cou.id || '',
                            name: cou.name || '',
                            slug: cou.slug || ''
                        })),
                        is_copyright: movieInfo.is_copyright || false,
                        chieurap: movieInfo.chieurap || false,
                        poster_url: movieInfo.poster_url || '',
                        sub_docquyen: movieInfo.sub_docquyen || false,
                        episodes: (episodes || []).map(server => ({
                            server_name: server.server_name,
                            server_data: server.server_data.map(ep => ({
                                name: ep.name,
                                slug: ep.slug,
                                filename: ep.filename,
                                link_embed: ep.link_embed,
                                link_m3u8: ep.link_m3u8
                            }))
                        })),
                        category_id: category._id, // Gi·ªØ l·∫°i category_id cho kh·∫£ nƒÉng t∆∞∆°ng th√≠ch
                    };

                    try {
                        // T·∫°o phim m·ªõi v√† ƒë√°nh d·∫•u l√† phim m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t Elasticsearch
                        const movie = new Movie(movieData);
                        movie._isNew = true; // ƒê√°nh d·∫•u l√† phim m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t Elasticsearch
                        await movie.save();
                        console.log(`‚úÖ T·∫°o m·ªõi phim '${movieData.name}' v·ªõi ${movieData.episodes?.length || 0} server!`);
                        savedMovies.push(movie);
                    } catch (err) {
                        console.error(`‚ùå L·ªói khi l∆∞u phim '${movieData.name}':`, err.message);
                        console.error('Chi ti·∫øt l·ªói:', JSON.stringify(movieData, null, 2));
                    }
                }

                // X·ª≠ l√Ω phim ƒë√£ t·ªìn t·∫°i - ki·ªÉm tra v√† c·∫≠p nh·∫≠t t·∫≠p m·ªõi n·∫øu c√≥
                for (const detail of existingMoviesDetails) {
                    if (!detail || !detail.movieInfo) {
                        console.log("‚ùå Phim kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt.");
                        continue;
                    }

                    const { movieInfo, episodes } = detail;
                    const existingMovie = existingMoviesMap.get(movieInfo.slug);

                    if (!existingMovie) {
                        console.error(`‚ùå Kh√¥ng t√¨m th·∫•y phim '${movieInfo.name}' (${movieInfo.slug}) trong cache.`);
                        continue;
                    }

                    // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t t·∫≠p m·ªõi
                    const updateResult = await this.checkAndUpdateEpisodes(existingMovie, episodes);
                    
                    if (updateResult.updated) {
                        console.log(`‚úÖ ${updateResult.message} cho phim '${movieInfo.name}'.`);
                        updatedMovies.push(updateResult.movie);
                    } else {
                        console.log(`‚è© ${updateResult.message} cho phim '${movieInfo.name}'.`);
                    }
                }

                console.log(`üéâ Crawl d·ªØ li·ªáu phim t·ª´ OPhim th√†nh c√¥ng!`);
                console.log(`üìã ƒê√£ t·∫°o m·ªõi ${savedMovies.length} phim, c·∫≠p nh·∫≠t ${updatedMovies.length} phim.`);
                
                return { savedMovies, updatedMovies };
            } else {
                console.log('‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu phim t·ª´ OPhim ho·∫∑c c·∫•u tr√∫c d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.');
                return { savedMovies: [], updatedMovies: [] };
            }
        } catch (error) {
            console.error('‚ùå L·ªói khi crawl d·ªØ li·ªáu phim t·ª´ OPhim:', error.message);
            return { savedMovies: [], updatedMovies: [] };
        }
    }
    
    async crawlMoviesAllPage() {
        try {
            const totalPages = 1500; // S·ªë trang t·ªïng c·ªông m√† b·∫°n mu·ªën crawl
            const allNewMovies = [];
            const allUpdatedMovies = [];
            const errors = [];
            const skippedMovies = []; // Danh s√°ch c√°c phim b·ªã b·ªè qua ho√†n to√†n (kh√¥ng c√≥ t·∫≠p m·ªõi)
    
            for (let currentPage = 1; currentPage <= totalPages; currentPage++) {
                const response = await axios.get(`${BASE_URL}movies`, { params: { page: currentPage } });
                const data = response.data;
    
                console.log(`Crawl trang ${currentPage}...`);
    
                if (data.data && data.data.status && Array.isArray(data.data.items) && data.data.items.length > 0) {
                    const moviesList = data.data.items;
                    
                    // D·ªØ li·ªáu phim m·ªõi v√† phim c·∫≠p nh·∫≠t cho trang hi·ªán t·∫°i
                    const newMovies = [];
                    const updatedMovies = [];
                    const existingSlugs = new Set();
                    const existingMoviesMap = new Map(); // Map ƒë·ªÉ l∆∞u phim ƒë√£ t·ªìn t·∫°i theo slug
    
                    // Ki·ªÉm tra phim n√†o ƒë√£ t·ªìn t·∫°i trong DB tr∆∞·ªõc khi l·∫•y chi ti·∫øt
                    for (const movie of moviesList) {
                        if (movie.slug) {
                            const existingMovie = await Movie.findOne({ slug: movie.slug });
                            if (existingMovie) {
                                existingSlugs.add(movie.slug);
                                existingMoviesMap.set(movie.slug, existingMovie);
                                console.log(`üîç Phim '${movie.name}' (${movie.slug}) ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra c·∫≠p nh·∫≠t t·∫≠p m·ªõi...`);
                            }
                        }
                    }
    
                    // L·ªçc danh s√°ch phim ch∆∞a t·ªìn t·∫°i
                    const newMoviesList = moviesList.filter(movie => movie.slug && !existingSlugs.has(movie.slug));
                    // L·ªçc danh s√°ch phim ƒë√£ t·ªìn t·∫°i ƒë·ªÉ ki·ªÉm tra c·∫≠p nh·∫≠t t·∫≠p m·ªõi
                    const existingMoviesList = moviesList.filter(movie => movie.slug && existingSlugs.has(movie.slug));
                    
                    if (newMoviesList.length === 0 && existingMoviesList.length === 0) {
                        console.log(`‚è© Kh√¥ng c√≥ phim n√†o c·∫ßn x·ª≠ l√Ω tr√™n trang ${currentPage}.`);
                        continue;
                    }
                    
                    // X·ª≠ l√Ω c√°c phim m·ªõi
                    if (newMoviesList.length > 0) {
                        console.log(`üîç L·∫•y chi ti·∫øt cho ${newMoviesList.length} phim m·ªõi t·ª´ trang ${currentPage}...`);
                        
                        const newMovieDetailsPromises = newMoviesList.map(movie => {
                            if (!movie.slug) {
                                console.error(`‚ùå Phim '${movie.name}' thi·∫øu slug, kh√¥ng th·ªÉ l·∫•y chi ti·∫øt.`);
                                return null;
                            }
    
                            return axios.get(`${BASE_URL}movies/${movie.slug}`)
                                .then(res => {
                                    const { movie: movieInfo, episodes } = res.data.data;
                                    return { movieInfo, episodes };
                                })
                                .catch(err => {
                                    console.error(`L·ªói khi l·∫•y chi ti·∫øt phim ${movie.slug}:`, err.message);
                                    return null;
                                });
                        });
    
                        const newMovieDetails = await Promise.all(newMovieDetailsPromises);
                        const validNewMovies = newMovieDetails.filter(detail => detail !== null);
    
                        // X·ª≠ l√Ω v√† l∆∞u c√°c phim m·ªõi
                        for (const detail of validNewMovies) {
                            if (!detail || !detail.movieInfo) {
                                console.log("‚ùå Phim kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt.");
                                continue;
                            }
    
                            const { movieInfo, episodes } = detail;
                            
                            // L·∫•y th·ªÉ lo·∫°i t·ª´ movieInfo
                            const genre = movieInfo.genre || 'Unknown';
    
                            let category = await Category.findOne({ name: genre });
                            if (!category) {
                                category = new Category({ name: genre });
                                await category.save();
                                console.log(`‚úÖ Th·ªÉ lo·∫°i '${genre}' ƒë√£ ƒë∆∞·ª£c t·∫°o!`);
                            }
    
                            // Chu·∫©n b·ªã d·ªØ li·ªáu phim v·ªõi c·∫•u tr√∫c m·ªõi
                            const movieData = {
                                tmdb: {
                                    type: movieInfo.tmdb?.type || null,
                                    id: movieInfo.tmdb?.id || '',
                                    season: movieInfo.tmdb?.season || null,
                                    vote_average: movieInfo.tmdb?.vote_average || 0,
                                    vote_count: movieInfo.tmdb?.vote_count || 0
                                },
                                imdb: {
                                    id: movieInfo.imdb?.id || ''
                                },
                                created: {
                                    time: movieInfo.created?.time || new Date()
                                },
                                modified: {
                                    time: movieInfo.modified?.time || new Date()
                                },
                                name: movieInfo.name,
                                origin_name: movieInfo.origin_name,
                                content: movieInfo.content,
                                type: movieInfo.type || 'series',
                                status: movieInfo.status || 'completed',
                                thumb_url: movieInfo.thumb_url || '',
                                trailer_url: movieInfo.trailer_url || '',
                                time: movieInfo.time || '60 ph√∫t/t·∫≠p',
                                episode_current: movieInfo.episode_current || '',
                                episode_total: movieInfo.episode_total || '',
                                quality: movieInfo.quality || 'HD',
                                lang: movieInfo.lang || 'Vietsub',
                                notify: movieInfo.notify || '',
                                showtimes: movieInfo.showtimes || '',
                                slug: movieInfo.slug,
                                year: movieInfo.year || new Date().getFullYear(),
                                view: movieInfo.view || 0,
                                actor: Array.isArray(movieInfo.actor) ? movieInfo.actor : [],
                                director: Array.isArray(movieInfo.director) ? movieInfo.director : [''],
                                category: (movieInfo.category || []).map(cat => ({
                                    id: cat.id || '',
                                    name: cat.name || '',
                                    slug: cat.slug || ''
                                })),
                                country: (movieInfo.country || []).map(cou => ({
                                    id: cou.id || '',
                                    name: cou.name || '',
                                    slug: cou.slug || ''
                                })),
                                is_copyright: movieInfo.is_copyright || false,
                                chieurap: movieInfo.chieurap || false,
                                poster_url: movieInfo.poster_url || '',
                                sub_docquyen: movieInfo.sub_docquyen || false,
                                episodes: (episodes || []).map(server => ({
                                    server_name: server.server_name,
                                    server_data: server.server_data.map(ep => ({
                                        name: ep.name,
                                        slug: ep.slug,
                                        filename: ep.filename,
                                        link_embed: ep.link_embed,
                                        link_m3u8: ep.link_m3u8
                                    }))
                                })),
                                category_id: category._id, // Gi·ªØ l·∫°i category_id cho kh·∫£ nƒÉng t∆∞∆°ng th√≠ch
                            };
    
                            try {
                                // T·∫°o phim m·ªõi v√† ƒë√°nh d·∫•u l√† phim m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t Elasticsearch
                                const movie = new Movie(movieData);
                                movie._isNew = true; // ƒê√°nh d·∫•u l√† phim m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t Elasticsearch
                                await movie.save();
                                console.log(`‚úÖ T·∫°o m·ªõi phim '${movieData.name}' v·ªõi ${movieData.episodes?.length || 0} server!`);
                                newMovies.push(movie);
                            } catch (err) {
                                if (err.code === 11000) {
                                    console.error(`‚ùå L·ªói tr√πng l·∫∑p slug: '${movieData.slug}', b·ªè qua phim n√†y.`);
                                    errors.push({ movie: movieData.name, slug: movieData.slug });
                                } else {
                                    console.error(`‚ùå L·ªói khi l∆∞u phim '${movieData.name}':`, err.message);
                                    errors.push({ movie: movieData.name, error: err.message });
                                }
                            }
                        }
                    }
                    
                    // X·ª≠ l√Ω c√°c phim ƒë√£ t·ªìn t·∫°i - ki·ªÉm tra c·∫≠p nh·∫≠t t·∫≠p m·ªõi
                    if (existingMoviesList.length > 0) {
                        console.log(`üîç Ki·ªÉm tra c·∫≠p nh·∫≠t t·∫≠p m·ªõi cho ${existingMoviesList.length} phim t·ª´ trang ${currentPage}...`);
                        
                        const existingMovieDetailsPromises = existingMoviesList.map(movie => {
                            if (!movie.slug) {
                                console.error(`‚ùå Phim '${movie.name}' thi·∫øu slug, kh√¥ng th·ªÉ l·∫•y chi ti·∫øt.`);
                                return null;
                            }
    
                            return axios.get(`${BASE_URL}movies/${movie.slug}`)
                                .then(res => {
                                    const { movie: movieInfo, episodes } = res.data.data;
                                    return { movieInfo, episodes };
                                })
                                .catch(err => {
                                    console.error(`L·ªói khi l·∫•y chi ti·∫øt phim ${movie.slug}:`, err.message);
                                    return null;
                                });
                        });
    
                        const existingMovieDetails = await Promise.all(existingMovieDetailsPromises);
                        const validExistingMovies = existingMovieDetails.filter(detail => detail !== null);
    
                        // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t c√°c phim ƒë√£ t·ªìn t·∫°i
                        for (const detail of validExistingMovies) {
                            if (!detail || !detail.movieInfo) {
                                console.log("‚ùå Phim kh√¥ng c√≥ d·ªØ li·ªáu chi ti·∫øt.");
                                continue;
                            }
    
                            const { movieInfo, episodes } = detail;
                            const existingMovie = existingMoviesMap.get(movieInfo.slug);
    
                            if (!existingMovie) {
                                console.error(`‚ùå Kh√¥ng t√¨m th·∫•y phim '${movieInfo.name}' (${movieInfo.slug}) trong cache.`);
                                continue;
                            }
    
                            // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t t·∫≠p m·ªõi
                            const updateResult = await this.checkAndUpdateEpisodes(existingMovie, episodes);
                            
                            if (updateResult.updated) {
                                console.log(`‚úÖ ${updateResult.message} cho phim '${movieInfo.name}'.`);
                                updatedMovies.push(updateResult.movie);
                            } else {
                                console.log(`‚è© ${updateResult.message} cho phim '${movieInfo.name}'.`);
                                skippedMovies.push({ name: movieInfo.name, slug: movieInfo.slug, reason: updateResult.message });
                            }
                        }
                    }
                    
                    // Th√™m k·∫øt qu·∫£ c·ªßa trang hi·ªán t·∫°i v√†o t·ªïng h·ª£p
                    allNewMovies.push(...newMovies);
                    allUpdatedMovies.push(...updatedMovies);
                    
                    console.log(`üìä Trang ${currentPage}: ƒê√£ t·∫°o ${newMovies.length} phim m·ªõi, c·∫≠p nh·∫≠t ${updatedMovies.length} phim c√≥ t·∫≠p m·ªõi.`);
                } else {
                    console.log(`‚ùå Kh√¥ng c√≥ phim n√†o tr√™n trang ${currentPage}`);
                }
            }
    
            console.log(`üéâ Crawl d·ªØ li·ªáu phim t·ª´ OPhim ho√†n th√†nh!`);
            console.log(`üìã T·ªïng k·∫øt: ƒê√£ t·∫°o ${allNewMovies.length} phim m·ªõi, c·∫≠p nh·∫≠t ${allUpdatedMovies.length} phim c√≥ t·∫≠p m·ªõi.`);
            console.log(`üìã S·ªë phim b·ªè qua (kh√¥ng c√≥ t·∫≠p m·ªõi): ${skippedMovies.length}`);
            
            return { 
                savedMovies: allNewMovies, 
                updatedMovies: allUpdatedMovies,
                skippedMovies, 
                errors 
            };
        } catch (error) {
            console.error('‚ùå L·ªói khi crawl d·ªØ li·ªáu phim:', error.message);
            throw error;
        }
    }          

    // H√†m m·ªõi ƒë·ªÉ ki·ªÉm tra v√† c·∫≠p nh·∫≠t t·∫≠p m·ªõi cho phim ƒë√£ t·ªìn t·∫°i
    async checkAndUpdateEpisodes(existingMovie, newEpisodes) {
        try {
            // N·∫øu kh√¥ng c√≥ episodes m·ªõi ƒë·ªÉ ki·ªÉm tra
            if (!newEpisodes || newEpisodes.length === 0) {
                return { updated: false, message: 'Kh√¥ng c√≥ t·∫≠p phim m·ªõi ƒë·ªÉ ki·ªÉm tra.' };
            }

            let hasNewEpisodes = false;
            let newEpisodeCount = 0;
            
            // T·∫°o b·∫£n sao episodes hi·ªán t·∫°i ƒë·ªÉ s·ª≠a ƒë·ªïi
            const updatedEpisodes = [...existingMovie.episodes];

            // Duy·ªát qua t·ª´ng server trong episodes m·ªõi
            for (const newServer of newEpisodes) {
                // T√¨m server t∆∞∆°ng ·ª©ng trong episodes hi·ªán t·∫°i
                const existingServerIndex = updatedEpisodes.findIndex(
                    s => s.server_name === newServer.server_name
                );

                if (existingServerIndex === -1) {
                    // N·∫øu server ch∆∞a t·ªìn t·∫°i, th√™m m·ªõi ho√†n to√†n
                    updatedEpisodes.push(newServer);
                    newEpisodeCount += newServer.server_data.length;
                    hasNewEpisodes = true;
                    console.log(`‚úÖ Th√™m m·ªõi server '${newServer.server_name}' v·ªõi ${newServer.server_data.length} t·∫≠p.`);
                } else {
                    // N·∫øu server ƒë√£ t·ªìn t·∫°i, ki·ªÉm tra t·ª´ng episode
                    const existingServer = updatedEpisodes[existingServerIndex];
                    const existingEpisodeSlugs = new Set(existingServer.server_data.map(e => e.slug));
                    
                    // T√¨m c√°c episode ch∆∞a t·ªìn t·∫°i
                    const newServerData = newServer.server_data.filter(
                        episode => !existingEpisodeSlugs.has(episode.slug)
                    );
                    
                    if (newServerData.length > 0) {
                        // Th√™m c√°c episode m·ªõi v√†o server hi·ªán t·∫°i
                        updatedEpisodes[existingServerIndex].server_data = [
                            ...existingServer.server_data,
                            ...newServerData
                        ];
                        newEpisodeCount += newServerData.length;
                        hasNewEpisodes = true;
                        console.log(`‚úÖ Th√™m ${newServerData.length} t·∫≠p m·ªõi v√†o server '${newServer.server_name}'.`);
                    }
                }
            }

            if (hasNewEpisodes) {
                // C·∫≠p nh·∫≠t tr·∫°ng th√°i phim n·∫øu c√≥ t·∫≠p m·ªõi
                const episodeStats = this.calculateEpisodeStats(newEpisodes);
                
                // C·∫≠p nh·∫≠t DB v·ªõi episodes m·ªõi v√† th√¥ng tin m·ªõi kh√°c
                const updateData = {
                    episodes: updatedEpisodes,
                    modified: { time: new Date() }
                };
                
                // C·∫≠p nh·∫≠t th√¥ng tin episode_current v√† episode_total n·∫øu c√≥
                if (episodeStats.episode_current) {
                    updateData.episode_current = episodeStats.episode_current;
                }
                if (episodeStats.episode_total) {
                    updateData.episode_total = episodeStats.episode_total;
                }
                
                // S·ª≠ d·ª•ng findOneAndUpdate ƒë·ªÉ c·∫≠p nh·∫≠t phim
                const updatedMovie = await Movie.findOneAndUpdate(
                    { _id: existingMovie._id },
                    updateData,
                    { new: true }
                );
                
                return { 
                    updated: true, 
                    message: `C·∫≠p nh·∫≠t th√†nh c√¥ng ${newEpisodeCount} t·∫≠p m·ªõi.`,
                    movie: updatedMovie
                };
            }
            
            return { updated: false, message: 'Kh√¥ng c√≥ t·∫≠p phim m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t.' };
        } catch (error) {
            console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t t·∫≠p phim m·ªõi:', error);
            return { updated: false, message: `L·ªói: ${error.message}` };
        }
    }
    
    // H√†m h·ªó tr·ª£ t√≠nh to√°n th√¥ng tin episode_current v√† episode_total t·ª´ episodes
    calculateEpisodeStats(episodes) {
        if (!episodes || episodes.length === 0) {
            return {};
        }
        
        let maxEpisodes = 0;
        
        // T√¨m server c√≥ nhi·ªÅu episode nh·∫•t ƒë·ªÉ x√°c ƒë·ªãnh s·ªë t·∫≠p hi·ªán t·∫°i
        episodes.forEach(server => {
            if (server.server_data && server.server_data.length > maxEpisodes) {
                maxEpisodes = server.server_data.length;
            }
        });
        
        // ƒê·ªãnh d·∫°ng th√¥ng tin episode
        return {
            episode_current: `ƒê√£ c·∫≠p nh·∫≠t ${maxEpisodes} t·∫≠p`,
            episode_total: `${maxEpisodes} T·∫≠p`
        };
    }
}

module.exports = new MovieCrawlService();
