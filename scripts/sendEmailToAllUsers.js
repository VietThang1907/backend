// scripts/sendEmailToAllUsers.js
require('dotenv').config();
const mongoose = require('mongoose');
const User = require('../src/models/user');
const EmailNotificationLog = require('../src/models/emailNotificationLog');
const { transporter, verifyEmailConfig } = require('../src/config/email');

/**
 * L·∫•y danh s√°ch email c·ªßa t·∫•t c·∫£ ng∆∞·ªùi d√πng t·ª´ database
 * @param {Object} options - T√πy ch·ªçn truy v·∫•n
 * @param {Object} options.filter - B·ªô l·ªçc MongoDB
 * @returns {Promise<string[]>} Danh s√°ch email
 */
async function getEmails(options = {}) {
  const { filter = {}, isActive = true } = options;
  
  // Th√™m ƒëi·ªÅu ki·ªán isActive v√†o filter n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
  const finalFilter = { ...filter };
  if (isActive !== null) {
    finalFilter.isActive = isActive;
  }

  try {
    // K·∫øt n·ªëi ƒë·∫øn database
    await mongoose.connect(process.env.MONGODB_URI);
    console.log('‚úÖ K·∫øt n·ªëi MongoDB th√†nh c√¥ng');
    
    // L·∫•y t·∫•t c·∫£ email ng∆∞·ªùi d√πng theo ƒëi·ªÅu ki·ªán l·ªçc
    const users = await User.find(finalFilter).select('email fullname -_id');
    
    console.log(`üìß T√¨m th·∫•y ${users.length} ng∆∞·ªùi d√πng`);
    return users;
  } catch (error) {
    console.error('‚ùå L·ªói khi truy v·∫•n database:', error);
    throw error;
  }
}

/**
 * G·ª≠i email t·ªõi danh s√°ch ng∆∞·ªùi d√πng (ƒë∆∞·ª£c chia th√†nh c√°c nh√≥m nh·ªè)
 * @param {Object} options - T√πy ch·ªçn email
 * @param {string} options.subject - Ti√™u ƒë·ªÅ email
 * @param {string} options.htmlContent - N·ªôi dung HTML
 * @param {Array} options.users - Danh s√°ch ng∆∞·ªùi d√πng
 * @param {number} options.batchSize - K√≠ch th∆∞·ªõc m·ªói batch (m·∫∑c ƒë·ªãnh l√† 50)
 * @returns {Promise<Object>} K·∫øt qu·∫£ g·ª≠i email
 */
const sendEmailToBatches = async ({ subject, htmlContent, users, batchSize = 50 }) => {
  // Chia th√†nh c√°c nh√≥m nh·ªè ƒë·ªÉ tr√°nh b·ªã ch·∫∑n
  const batches = [];
  for (let i = 0; i < users.length; i += batchSize) {
    batches.push(users.slice(i, i + batchSize));
  }
  
  let totalSent = 0;
  let failed = 0;
  let failedEmails = [];
  
  console.log(`üì® G·ª≠i email ƒë·∫øn ${users.length} ng∆∞·ªùi d√πng (${batches.length} batches)`);
  
  // G·ª≠i email theo t·ª´ng batch
  for (let [index, batch] of batches.entries()) {
    const emailList = batch.map(user => user.email);
    
    try {
      // T·∫°o n·ªôi dung email
      const emailContent = {
        from: process.env.EMAIL_USER,
        bcc: emailList, // S·ª≠ d·ª•ng BCC ƒë·ªÉ ·∫©n danh s√°ch ng∆∞·ªùi nh·∫≠n
        subject: subject,
        html: htmlContent
      };
      
      // G·ª≠i email
      await transporter.sendMail(emailContent);
      totalSent += emailList.length;
      
      console.log(`‚úÖ Batch ${index + 1}/${batches.length}: ƒê√£ g·ª≠i th√†nh c√¥ng ƒë·∫øn ${emailList.length} ng∆∞·ªùi d√πng`);
    } catch (error) {
      console.error(`‚ùå Batch ${index + 1}/${batches.length}: L·ªói g·ª≠i - ${error.message}`);
      failed += emailList.length;
      failedEmails = [...failedEmails, ...emailList];
    }
    
    // Ch·ªù m·ªôt ch√∫t tr∆∞·ªõc khi g·ª≠i batch ti·∫øp theo (ƒë·ªÉ tr√°nh rate limiting)
    if (index < batches.length - 1) {
      console.log('‚è≥ ƒê·ª£i 3 gi√¢y tr∆∞·ªõc khi g·ª≠i batch ti·∫øp theo...');
      await new Promise(resolve => setTimeout(resolve, 3000));
    }
  }
  
  return {
    totalSent,
    failed,
    failedEmails
  };
};

/**
 * G·ª≠i email ƒë·∫øn danh s√°ch ng∆∞·ªùi d√πng
 * @param {Object} options - T√πy ch·ªçn email
 * @param {string} options.subject - Ti√™u ƒë·ªÅ email
 * @param {string} options.message - N·ªôi dung vƒÉn b·∫£n
 * @param {string} options.htmlContent - N·ªôi dung HTML (t√πy ch·ªçn)
 * @param {Object} options.filter - B·ªô l·ªçc MongoDB cho ng∆∞·ªùi d√πng (t√πy ch·ªçn)
 * @param {string} options.userGroup - Nh√≥m ng∆∞·ªùi d√πng (all, premium, free)
 */
async function sendEmailToUsers(options) {
  const { subject, message, htmlContent, filter = {}, userGroup = 'all', batchSize = 50 } = options;
  
  if (!subject || !message) {
    console.error('‚ùå Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: subject, message');
    return;
  }

  try {
    // Ki·ªÉm tra c·∫•u h√¨nh email
    const emailConfigOk = await verifyEmailConfig();
    if (!emailConfigOk) {
      console.error('‚ùå C·∫•u h√¨nh email kh√¥ng h·ª£p l·ªá');
      return;
    }
    
    // X√¢y d·ª±ng query d·ª±a v√†o userGroup
    const finalFilter = { ...filter };
    if (userGroup === 'premium') {
      finalFilter.accountTypeId = { $ne: null };
      console.log('üîç L·ªçc ng∆∞·ªùi d√πng: Premium');
    } else if (userGroup === 'free') {
      finalFilter.accountTypeId = null;
      console.log('üîç L·ªçc ng∆∞·ªùi d√πng: Free');
    } else {
      console.log('üîç L·ªçc ng∆∞·ªùi d√πng: T·∫•t c·∫£');
    }
    
    // L·∫•y danh s√°ch email ng∆∞·ªùi d√πng
    const users = await getEmails({ filter: finalFilter });
    
    if (users.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o ph√π h·ª£p');
      return;
    }
    
    // Chu·∫©n b·ªã n·ªôi dung email
    const defaultHtmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 5px;">
        <h2 style="color: #e50914;">Th√¥ng B√°o T·ª´ Movie Streaming</h2>
        <p>K√≠nh g·ª≠i Qu√Ω kh√°ch h√†ng,</p>
        <p>${message}</p>
        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© h·ªó tr·ª£ Movie Streaming</p>
      </div>
    `;

    const finalHtmlContent = htmlContent || defaultHtmlContent;

    // G·ª≠i email theo t·ª´ng batch
    const result = await sendEmailToBatches({
      subject,
      htmlContent: finalHtmlContent,
      users,
      batchSize: parseInt(batchSize, 10)
    });

    // L∆∞u l·ªãch s·ª≠ g·ª≠i th√¥ng b√°o
    const status = result.failed > 0 ? 'partial' : 'success';
    await EmailNotificationLog.create({
      subject,
      message,
      type: 'bulk',
      userGroup,
      sentBy: null, // Null v√¨ g·ª≠i t·ª´ script
      recipientCount: result.totalSent,
      status,
      metadata: {
        sentFromScript: true,
        totalUsers: users.length,
        totalSent: result.totalSent,
        failed: result.failed
      }
    });

    console.log('\nüìä K·∫øt qu·∫£ g·ª≠i email:');
    console.log(`- T·ªïng s·ªë ng∆∞·ªùi d√πng: ${users.length}`);
    console.log(`- G·ª≠i th√†nh c√¥ng: ${result.totalSent}`);
    console.log(`- G·ª≠i th·∫•t b·∫°i: ${result.failed}`);
    
    if (result.failedEmails.length > 0) {
      console.log('\n‚ùå C√°c ƒë·ªãa ch·ªâ email th·∫•t b·∫°i:');
      console.log(result.failedEmails.slice(0, 10).join(', ') + 
                (result.failedEmails.length > 10 ? ' (v√† nhi·ªÅu h∆°n...)' : ''));
    }
    
    console.log(`üéâ ƒê√£ g·ª≠i email th√†nh c√¥ng ƒë·∫øn ${result.totalSent} ng∆∞·ªùi d√πng`);
  } catch (error) {
    console.error('‚ùå L·ªói khi g·ª≠i email:', error);
    
    try {
      // L∆∞u l·ªãch s·ª≠ l·ªói
      await EmailNotificationLog.create({
        subject: options.subject || 'Email h√†ng lo·∫°t',
        message: options.message || '',
        type: 'bulk',
        userGroup: options.userGroup || 'all',
        sentBy: null,
        recipientCount: 0,
        status: 'failed',
        errorMessage: error.message || 'Unknown error',
        metadata: {
          sentFromScript: true
        }
      });
    } catch (logError) {
      console.error('‚ùå L·ªói khi ghi log th·∫•t b·∫°i:', logError);
    }
    
    throw error;
  } finally {
    await mongoose.disconnect();
    console.log('üîö ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Ch·∫°y script n·∫øu ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  // L·∫•y c√°c tham s·ªë t·ª´ d√≤ng l·ªánh
  const args = process.argv.slice(2);
  const params = {};
  args.forEach((arg, index) => {
    if (arg.startsWith('--')) {
      const key = arg.slice(2);
      const value = args[index + 1] && !args[index + 1].startsWith('--') ? args[index + 1] : true;
      params[key] = value;
    }
  });
  
  // Ch·∫ø ƒë·ªô t∆∞∆°ng t√°c n·∫øu kh√¥ng c√≥ tham s·ªë
  if (Object.keys(params).length === 0) {
    const readline = require('readline').createInterface({
      input: process.stdin,
      output: process.stdout
    });

    console.log('üìß G·ª≠i email th√¥ng b√°o t·ªõi ng∆∞·ªùi d√πng');
    console.log('-------------------------------------');

    readline.question('Ti√™u ƒë·ªÅ email: ', (subject) => {
      readline.question('N·ªôi dung th√¥ng b√°o: ', (message) => {
        readline.question('Nh√≥m ng∆∞·ªùi d√πng (all/premium/free, m·∫∑c ƒë·ªãnh: all): ', (userGroup) => {
          readline.question('K√≠ch th∆∞·ªõc batch (s·ªë l∆∞·ª£ng email m·ªói l·∫ßn g·ª≠i, m·∫∑c ƒë·ªãnh: 50): ', (batchSizeStr) => {
            readline.close();
            
            const finalUserGroup = userGroup || 'all';
            const batchSize = parseInt(batchSizeStr, 10) || 50;
            
            console.log(`\nüì§ B·∫Øt ƒë·∫ßu g·ª≠i email cho nh√≥m: ${finalUserGroup}...`);
            sendEmailToUsers({ 
              subject, 
              message,
              userGroup: finalUserGroup,
              batchSize 
            })
              .then(() => console.log('‚úÖ Ho√†n th√†nh'))
              .catch(err => console.error('‚ùå L·ªói:', err))
              .finally(() => process.exit());
          });
        });
      });
    });
  } else {
    // S·ª≠ d·ª•ng tham s·ªë t·ª´ d√≤ng l·ªánh
    if (!params.subject || !params.message) {
      console.error('‚ùå Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc: --subject "Ti√™u ƒë·ªÅ" --message "N·ªôi dung"');
      console.log('S·ª≠ d·ª•ng: node sendEmailToAllUsers.js --subject "Ti√™u ƒë·ªÅ" --message "N·ªôi dung" [--userGroup all|premium|free] [--batchSize 50]');
      process.exit(1);
    }
    
    sendEmailToUsers({ 
      subject: params.subject, 
      message: params.message,
      userGroup: params.userGroup || 'all',
      batchSize: params.batchSize || 50
    })
      .then(() => console.log('‚úÖ Ho√†n th√†nh'))
      .catch(err => console.error('‚ùå L·ªói:', err))
      .finally(() => process.exit());
  }
}

module.exports = {
  getEmails,
  sendEmailToBatches,
  sendEmailToUsers
};
